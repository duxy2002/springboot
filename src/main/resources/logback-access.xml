<configuration>

    <!--定义一个变量-->
    <property name="LOG_HOME" value="/opt/springboot/tomcat-log"/>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${LOG_HOME}/access.log</file>
        <!--true的时候，log内容被追加到既存文件的末尾。append为false的时候，既存文件的内容被覆盖。缺省值是true-->
        <append>true</append>
        <encoder>
            <!-- 有两个ShortcutKey common和combined.--> -->
            <!-- common和%h %l %u [%t] "%r" %s %b相同 -->
            <!-- %h: RemoteHostName -->
            <!-- %l: RemoteLogName。在logback-access中这个值是"-" -->
            <!-- %u: RemoteUser -->
            <!-- %t: LoggingEvent的日期时间 -->
            <!-- %r: 被请求的URL -->
            <!-- %s: Response的StatusCode -->
            <!-- %b: Response的Contents长度 -->
            <!-- %D: 处理request的时间。单位：毫秒-->
            <!-- %m: 请求的method-->
            <!-- %i{header}：reqeustHeader-->
            <pattern>%h %l %u [%t{yyyy/MM/dd HH:mm:ss.SSS,CST}] "%r" %s %b[bytes] %D[milliseconds]</pattern>
            <!--有了Log内容，马上就输出到File中。虽然设置为false，Logger的ThroughPut有可能提高5倍，但是应用程序关闭的时候，-->
            <!--appender没有关闭，或者有没有写到Disk的Log内容都会消失。-->
            <immediateFlush>true</immediateFlush>
            <!--在Log文件的最开始的地方，输出Log的输出形式。-->
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--指定文件切换时的Log文件名。文件的切换周期是从fileNamePattern的指定值推测出来的。-->
            <!--在指定值中包含文件名和%d变换指示识别信息。在%d变换指示识别信息中可以包含java.text.SimpleDataFormat类中定义的日期时刻的-->
            <!--Pattern。假如没有指定日期时刻的Pattern，那么就利用yyyy-MM-dd，也就是说是按照日来切换文件的。-->
            <!--fileNamePattern以.gz或者.zip结尾的时候，支持自动文件压缩。-->
            <!--%d可以指定多次，但是用于推测文件切换周期的只能有1个，其他的%d都需要加上aux参数-->
            <fileNamePattern>${LOG_HOME}/%d{yyyy-MM,aux}/access.%d.gz</fileNamePattern>
            <!--指定不删除，一直保持的文件的最大日期数。这里根据指定为30,而根据fileNamePattern信息可以知道是以日为单位切换Log文件，-->
            <!--所以30天以内的Log文件都为保持，但是超过30天的会被删除。-->
            <maxHistory>30</maxHistory>
            <!--true的时候，在appender开始的时候，就把旧的Log文件删除。-->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!--true的时候，不管别的FileAppender，别的JVM，别的机器有没有同时写相同文件，都可以保证正确写文件。缺省值为false。-->
        <!--但是true的时候，不支持文件压缩，FileAppender的file属性也必须为空。-->
        <prudent>false</prudent>
    </appender>
    <appender-ref ref="FILE" />
</configuration>
